AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcStackName:
    Type: String
    Description: The name of the VPC stack on which to layer this template.
  RoleStackName:
    Type: String
    Description: The name of the role stack which contains the Ec2InstanceRole.
  ImageId:
    Type: 'AWS::EC2::Image::Id'
    Description: AMI to use in the LaunchConfiguration
    ConstraintDescription: must be a valid AMI id
  MinSize:
    Type: Number
    Description: The MinSize of Asg
    ConstraintDescription: Must be >= 0
  MaxSize:
    Description: The MaxSize of Asg
    Type: Number
    ConstraintDescription: Must be >= MinSize
  DesiredCapacity:
    Description: The DesiredCapacity of Asg
    Type: Number
    ConstraintDescription: Must be between MinSize and MaxSize (inclusive)
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Resources:
  Elb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: ipv4
      Name: !Sub '${AWS::StackName}-ELB'
      Scheme: internet-facing
      SecurityGroups:
        - !ImportValue
          Fn::Sub: '${VpcStackName}-OpenSg'
      Subnets:
        # Kevin's role stack uses SubNet rather than Subnet
        - !ImportValue
          Fn::Sub: '${VpcStackName}-SubnetA'
        - !ImportValue
          Fn::Sub: '${VpcStackName}-SubnetB'
        - !ImportValue
          Fn::Sub: '${VpcStackName}-SubnetC'
      Type: "application"
  ElbListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref Elb
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ElbTarget
      Port: 3000
      Protocol: HTTP
  ElbTarget:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: Elb
    Properties:
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      HealthCheckProtocol: HTTP
      HealthCheckPath: /ping
      HealthCheckPort: 8000
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: '200'
      Port: 3000
      Protocol: HTTP
      VpcId: !ImportValue
        Fn::Sub: '${VpcStackName}-Vpc'
  ElbDns:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneName: staxlearning.org.
      RecordSets:
        - Name: !Join
            - ''
            - - wlh.
              - !Ref 'AWS::StackName'
              - .staxlearning.org.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt
              - Elb
              - CanonicalHostedZoneID
            DNSName: !GetAtt
              - Elb
              - DNSName
  Lt:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-Template'
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !ImportValue
            Fn::Sub: '${RoleStackName}-Ec2InstanceRoleInstanceProfileArn'
        ImageId: !Ref ImageId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
        - !ImportValue
          Fn::Sub: '${VpcStackName}-OpenSg'
        UserData: !Base64
          Fn::Join:
            - ''
            - - |
                #!/bin/bash -xe
              - |
                touch /home/ec2-user/some_file.txt
              - !Sub >
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
                Asg --region ${AWS::Region}
  Asg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - "ElbListener"
      - "Lt"
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref "Lt"
        Version: !GetAtt "Lt.LatestVersionNumber"
      Tags:
        - Key: Name
          Value: !Sub 'asg-instance-${AWS::StackName}'
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !ImportValue
          Fn::Sub: '${VpcStackName}-SubnetA'
        - !ImportValue
          Fn::Sub: '${VpcStackName}-SubnetB'
        - !ImportValue
          Fn::Sub: '${VpcStackName}-SubnetC'
      DesiredCapacity: !Ref DesiredCapacity
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      TargetGroupARNs:
        - !Ref ElbTarget
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 3
        MinInstancesInService: !Ref DesiredCapacity
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT5M
        SuspendProcesses:
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
